version: "3.0"

services:
# # бд, используемая для работы с пользователями и их правами
#   postgres_privelege:
#     image: postgres:16.3
#     restart: always
#     container_name: postgres_privelege
#     env_file: .env
#     environment:
#       - POSTGRES_USER=${P_POSTGRES_USER}
#       - POSTGRES_PASSWORD=${P_POSTGRES_PASSWORD}
#       - POSTGRES_DB=${P_POSTGRES_DATABASE}
#     volumes:
#       - ./services/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
#       # - ./services/postgres/data:/var/lib/postgresql/data
#     expose:
#       - ${P_POSTGRES_PORT}
#     networks:
#       - ecosystem
# # бд, используемая для хранения архивов каких-либо записей
  postgres:
    image: postgres:16.3
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=${P_POSTGRES_USER}
      - POSTGRES_PASSWORD=${P_POSTGRES_PASSWORD}
      - POSTGRES_DB=${P_POSTGRES_DATABASE}
    volumes:
      - ./services/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    ports:
      - ${P_POSTGRES_PORT}:${P_POSTGRES_PORT}
  # hydra:
  #   image: oryd/hydra:1.4.8
  #   ports:
  #     - ${HYDRA_PUBLIC_PORT}:${HYDRA_PUBLIC_PORT}
  #     - ${HYDRA_PRIVATE_PORT}:${HYDRA_PRIVATE_PORT}
  #   command:
  #     serve all --dangerous-force-http
  #   environment:
  #     - URLS_SELF_ISSUER=http://0.0.0.0:4444
  #     - URLS_CONSENT=http://0.0.0.0:3000/consent
  #     - URLS_LOGIN=http://0.0.0.0:3000/login
  #     - URLS_LOGOUT=http://0.0.0.0:3000/logout
  #     - DSN=memory
  #     - SECRETS_SYSTEM=youReallyNeedToChangeThis
  #     - OIDC_SUBJECT_IDENTIFIERS_SUPPORTED_TYPES=public,pairwise
  #     - OIDC_SUBJECT_IDENTIFIERS_PAIRWISE_SALT=youReallyNeedToChangeThis
  #   restart: unless-stopped
#   microservice_privelege:
#     build:
#       context: ./
#       dockerfile: Dockerfile
#     container_name: microservice_privelege
#     restart: always
#     expose:
#       - ${PS_SERVER_PORT}
#     tty: true
#     networks:
#       - ecosystem
#     depends_on:
#       - postgres_privelege
#   archive_manager:
#     build:
#       context: ./
#       dockerfile: ./microservices/archive_manager/Dockerfile
#     container_name: archive_manager
#     restart: always
#     expose:
#       - ${AM_SERVER_PORT}
#     tty: true
#     networks:
#       - ecosystem
#     depends_on:
#       - postgres_archive
#   task_manager1:
#     build:
#       context: ./
#       dockerfile: ./microservices/task_manager/Dockerfile
#     container_name: task_manager1
#     restart: always
#     expose:
#       - ${TM1_SERVER_PORT}
#     tty: true
#     environment:
#       - PS_SERVER_CONNECTION_HOST=${PS_SERVER_CONNECTION_HOST}
#       - PS_SERVER_PORT=${PS_SERVER_PORT}
#       - AM_SERVER_CONNECTION_HOST=${AM_SERVER_CONNECTION_HOST}
#       - AM_SERVER_PORT=${AM_SERVER_PORT}
#       - TM_SERVER_ADDRESS=${TM1_SERVER_ADDRESS}
#     networks:
#       - ecosystem
#     depends_on:
#       - archive_manager
#   task_manager2:
#     build:
#       context: ./
#       dockerfile: ./microservices/task_manager/Dockerfile
#     container_name: task_manager2
#     restart: always
#     expose:
#       - ${TM2_SERVER_PORT}
#     tty: true
#     environment:
#       - PS_SERVER_CONNECTION_HOST=${PS_SERVER_CONNECTION_HOST}
#       - PS_SERVER_PORT=${PS_SERVER_PORT}
#       - AM_SERVER_CONNECTION_HOST=${AM_SERVER_CONNECTION_HOST}
#       - AM_SERVER_PORT=${AM_SERVER_PORT}
#       - TM_SERVER_ADDRESS=${TM2_SERVER_ADDRESS}
#     networks:
#       - ecosystem
#     depends_on:
#       - archive_manager
#   task_manager3:
#     build:
#       context: ./
#       dockerfile: ./microservices/task_manager/Dockerfile
#     container_name: task_manager3
#     restart: always
#     expose:
#       - ${TM3_SERVER_PORT}
#     tty: true
#     environment:
#       - PS_SERVER_CONNECTION_HOST=${PS_SERVER_CONNECTION_HOST}
#       - PS_SERVER_PORT=${PS_SERVER_PORT}
#       - AM_SERVER_CONNECTION_HOST=${AM_SERVER_CONNECTION_HOST}
#       - AM_SERVER_PORT=${AM_SERVER_PORT}
#       - TM_SERVER_ADDRESS=${TM3_SERVER_ADDRESS}
#     networks:
#       - ecosystem
#     depends_on:
#       - archive_manager
#   nginx:
#     image: nginx:1.27.1
#     container_name: nginx
#     restart: always
#     volumes:
#       - ./services/nginx/logs:/var/log/nginx/
#       - ./services/nginx/dev/nginx.conf:/etc/nginx/nginx.conf
#     ports:
#       - ${NGINX_PORT}:${NGINX_PORT}
#     depends_on:
#      - task_manager3
#      - task_manager2
#      - task_manager1
#     tty: true
#     networks:
#       - ecosystem

#   # pgamdin:
#   #   image: dpage/pgadmin4:latest
#   #   restart: always
#   #   container_name: pgamdin
#   #   env_file: .env
#   #   environment:
#   #     - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
#   #     - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
#   #   ports:
#   #     - 82:80
#   #   networks:
#   #     - ecosystem

# networks:
#   ecosystem:
#     driver: bridge